package com.example.drawshapes

import android.os.Bundle
import android.util.DisplayMetrics
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.foundation.lazy.grid.itemsIndexed
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.material3.Button
import androidx.compose.material3.TextField
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateMapOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.core.graphics.toColorInt
import com.example.drawshapes.ui.theme.DrawShapesTheme
import java.lang.NumberFormatException
import kotlin.random.Random

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
//            val displayMetrics = DisplayMetrics()
//            windowManager.defaultDisplay.getMetrics(displayMetrics)
//            val width = displayMetrics.widthPixels
//            val heigh = displayMetrics.heightPixels

            DrawShapesTheme {
                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    HomeScreen()
                }
            }
        }
    }
}

data class SquareData(val label: String, val size: Int)


@Composable
fun createListSquare() = (1..77).map { value: Int ->
    SquareData(label = "${value}", size = 50)
}


fun randomColor(): Color {
    return Color(Random.nextInt(256), Random.nextInt(256), Random.nextInt(256))
}


@Composable
fun Square(
    data: SquareData,
    onClick: (SquareData) -> Unit,
    backgroundColor: Color
) {
    Box(
        modifier = Modifier
            .size(data.size.dp)
            .border(width = 2.dp, color = Color.Black)
            .clickable { onClick(data) }
            .background(backgroundColor),
        contentAlignment = Alignment.Center,

        ) {
        Text(
            text = data.label,
            textAlign = TextAlign.Center
        )
    }
}

@Preview(showBackground = true)
@Composable
fun HomeScreen() {

    var text by rememberSaveable { mutableStateOf("") }
    val squareColors = remember { mutableStateMapOf<String, Color>() }
    val squareChooses = remember { mutableListOf<SquareData>() }
    val listSquare = createListSquare()
    var foundValue by remember { mutableStateOf("") }
    val squareChooseSorted = sort(squareChooses)
    var foundColor by remember { mutableStateOf(Color.LightGray) }

    Column {
        LazyVerticalGrid(
            columns = GridCells.Adaptive(minSize = 50.dp)
        ) {
            itemsIndexed(listSquare) { index, square ->
                Square(
                    data = square,
                    onClick = { squareChoose ->
                        squareColors[squareChoose.label] = randomColor()
                        squareChooses.add(squareChoose)
                    },
                    backgroundColor = squareColors[square.label] ?: Color.LightGray
                )
            }

        }

        Row {

            TextField(
                value = text,
                onValueChange = { text = it },
                label = { Text("Enter target") },
                modifier = Modifier
                    .padding(1.dp)
                    .fillMaxWidth(0.3f)
            )

            Button(
                onClick = {
                    val index =
                        searchIndexByBinarySearch(squareChooseSorted, target = text.toInt())
                    if (index >= 0) {
                        foundColor = squareColors[squareChooseSorted[index].label] ?: Color.LightGray
                        foundValue = "Found " + (squareChooseSorted[index].label)
                    } else {
                        foundValue = "Not Found"
                        foundColor = Color.LightGray
                    }
                },
                modifier = Modifier.padding(start = 8.dp)
            ) {
                Text("Search")
            }

            Box(
                modifier = Modifier
                    .padding(10.dp)
                    .fillMaxWidth(1f)
                    .background(foundColor)
                    .padding(start = 8.dp, end = 1.dp)
            ) {
                Text("Status: $foundValue")
            }

        }


        Button(
            onClick = {
                squareColors.clear()
                squareChooses.clear()
            }
        ) {
            Text("Reset all")
        }


    }
}

fun sort(list: List<SquareData>): List<SquareData> {
    return list.sortedBy { it.label }
}

fun searchIndexByBinarySearch(data: List<SquareData>, target: Int): Int {

    var left = 0
    var right = data.size - 1

    while (left <= right) {
        val mid = left + (right - left) / 2


        if (target == data[mid].label.toInt()) {
            Log.d("compare", target.toString() + " compare " + data[mid].toString())
            return mid
        }
        if (target > data[mid].label.toInt()) {
            Log.d("compare", target.toString() + " compare " + data[mid].toString())
            left = mid + 1
        } else {
            Log.d("compare", target.toString() + " compare " + data[mid].toString())
            right = mid - 1
        }
    }
    return -1
}



